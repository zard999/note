### 晨测

- nodejs事件轮询机制：

  1. JavaScript是单线程的，在nodejs内部使用了第三方库libuv，nodejs会把I/O等异步操作交由它处理，而nodejs主线程可以继续去处理其他事情。
  2. libuv会开启不同的线程去处理这些异步操作，处理完成后，会把异步操作的回调函数放到nodejs的轮询队列中，nodejs会在适当的时候处理轮询队列中的回调函数，从而实现非阻塞。
  3. nodejs的轮询队列分为6个阶段，每个阶段都有一个FIFO（先进先出）队列来执行回调。通常情况下，当事件循环进入给定的阶段时，它将执行特定于该阶段的任何操作，然后再该阶段的队列中执行回调，直到队列已用尽或达到回调限制，事件循环将移动到下一阶段。

- 六个阶段如下：

   1. timers：timers阶段用来处理setTimeout()和setInterval()的回调函数

   2. pending callbacks(忽略)：这个阶段用来处理系统操作的回调函数

   3. idle prepare(忽略)：此阶段是仅供nodejs内部操作调用

   4. poll：①概述：这个阶段主要是用来处理I/O操作，网络请求等异步操作。

      ​		  ②当进入poll阶段的时候，如果poll阶段不为空，则指向完或者到达最大执行数量，就会进入下一阶段。

      ​		  ③...为空，则一直等着回调函数进来，除非check阶段或timers阶段有回调函数等待执行，才会进入下个阶段。

  	5. check：这个阶段用来处理setImmediate的回调函数

  	6. close callbacks：这个阶段用来处理如socket的close类似的关闭事件

- 微任务和宏任务

   1. 异步代码有优先级关系，有的优先级高先执行，有的优先级低后执行。

   2. 分为宏任务（macrotask）和微任务（microtask）

      ①宏任务：包括整体代码script、setTimeout、setInterval等等

      ②微任务：Promise.then/catch/finally、process.nextTick、queunMicrotask

  	3. js引擎执行异步代码，会优先执行微任务，再执行宏任务

  	4. 执行过程：

      ①执行栈选择最先进入队列的宏任务（一般都是script），执行其同步代码直至结束

      ②检查是否存在微任务，有则会执行至微任务队列为空

      ③执行宏任务中的异步代码

      ④执行过程中如果遇到微任务，就将它添加到微任务的任务队列中

      ⑤宏任务执行完毕后，立即依次执行当前微任务队列中的所有微任务

      ⑥开始下一个宏任务（从事件队列中获取）

- node函数

   1. 在nodeJS中，每一个JS模块都默认包裹了一层函数。

   2. 这个函数是所有模块都有的，node编译时往其中注入5个参数：、

      ①exports:代表当前模块暴露的对象

      ②require:用来引入其他模块

      ③module：当前模块的详细信息

      ④__filename：代表当前文件的绝对路径

      ⑤__dirname：代表但当前文件所在文件夹的绝对路径

